/**
* 654. Maximum Binary Tree
* You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:
*
* Create a root node whose value is the maximum value in nums.
* Recursively build the left subtree on the subarray prefix to the left of the maximum value.
* Recursively build the right subtree on the subarray suffix to the right of the maximum value.
* Return the maximum binary tree built from nums.
*/ 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        Stack<TreeNode> stack = new Stack<>();
        TreeNode root = null;
        for(int i =0;i<nums.length;i++) {
            TreeNode cur = new TreeNode(nums[i]);
            if(root==null) root = cur;
            else if(root.val<nums[i]) root = cur;
            while(!stack.isEmpty() && stack.peek().val < nums[i]) {
                cur.left = stack.pop();
            }
            if(!stack.isEmpty()) {
                stack.peek().right = cur;
            }
            stack.add(cur);
        }
        /*if(stack.isEmpty())
            return null;
        TreeNode root = stack.pop();
        while(!stack.isEmpty() && root.val<stack.peek().val) {
            root = stack.pop();
        }*/
        return root;
    }
}