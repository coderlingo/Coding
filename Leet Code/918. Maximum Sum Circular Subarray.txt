/**
* Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
* A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % ].
* A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.
*/
class Solution {
    private int kadane(int[] nums) {
        int curMax = nums[0];
        int maxSoFar = curMax;
        int i = 1;
        while(i<nums.length) {
            curMax = Math.max(curMax+nums[i],nums[i]);
            maxSoFar = Math.max(maxSoFar,curMax);
            i++;
        }
        return maxSoFar;
    }
    public int maxSubarraySumCircular(int[] nums) {
        if(nums.length==1)
            return nums[0];
        int max =  kadane(nums);
        int total = 0;
        for(int i = 0;i<nums.length;i++){
            total += nums[i];
            nums[i] = -nums[i];
        }
        int min = total + kadane(nums);
        if(min ==0 )
            return max;
        max = Math.max(max, min);
        return max;
       
    }
}