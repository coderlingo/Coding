/**
* 81. Search in Rotated Sorted Array II
* There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
* Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[
* k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].
* Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
* You must decrease the overall operation steps as much as possible.
*/

class Solution {
    public boolean bSearch(int[] nums, int target, int start , int end) {
        if(start> end) {
            return false;
           
        }
        int mid = (start+end)/2;
        if(nums[mid] == target) {
            return true;
        }
        if(nums[start]<=nums[mid]) {
            if(target<nums[mid] && target >= nums[start]) {
                return bSearch(nums, target, start,mid-1);
            } else 
                return bSearch(nums, target, mid+1, end);
        } else {
            if(target> nums[mid] && target<=nums[end]) {
                return bSearch(nums,target, mid+1,end);
            } else {
                return bSearch(nums,target,start,mid-1);
            }
        }
    }
    public boolean search(int[] nums, int target) {
        Arrays.sort(nums);
        return bSearch(nums,target,0,nums.length-1);
    }
}