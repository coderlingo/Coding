/**
* 995. Minimum Number of K Consecutive Bit Flips
* You are given a binary array nums and an integer k.
* A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.
* Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.
* A subarray is a contiguous part of an array.
*/
class Solution {
    public int minKBitFlips(int[] nums, int k) {
        int start = 0;
        int end = 0;
        int count = 0;
        while(start<nums.length) {
            while(start<nums.length && nums[start] ==1) {
                start++;
            }
            if(start==nums.length)
                return count;
            end = start;
            int p=0;
            while(end<nums.length && p<k) {
                nums[end] ^= 1;
                end++;
                p++;
            }
            if(end==nums.length && p!=k) {
                return -1;
            }
            count++;
        }
        return count;
    }
}