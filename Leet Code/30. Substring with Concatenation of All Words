/**
* 30. Substring with Concatenation of All Words
* You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and 
* without any intervening characters.
* You can return the answer in any order.
*/
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
       int start = 0;
       int end = 0;
       int len = words[0].length();
       HashMap<String,Integer> map = new HashMap<>();
       for(String word : words) {
            map.put(word,map.getOrDefault(word,0)+1);
        }
        HashMap<String, Integer> map1 = new HashMap<>(map);
        int count = 0;
        List<Integer> result = new LinkedList<>();
        while(start<=s.length()-(len*words.length)) {            
           String sub = s.substring(end,end+len);
           if(map.containsKey(sub) && map.get(sub)>0) {
               map.put(sub,map.get(sub)-1);
               count++;
               end +=len;
           } else {
               start = start+1;
               map = new HashMap<>(map1);
               end = start;
               count = 0;
           }
           if(count == words.length) {
               result.add(start);
           }
            if(end+len > s.length()) {
               start = start+1;
               map = new HashMap<>(map1);
               end = start;
               count = 0;
            }
       }
        return result;
    }
}