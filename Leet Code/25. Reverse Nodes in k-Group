/**
* 25. Reverse Nodes in k-Group
* Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
* k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
* You may not alter the values in the list's nodes, only nodes themselves may be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode start = head;
        ListNode end = head;
        ListNode prev1 = null;
        while(end!=null && end.next!=null) {
            int i = 1;
            while(i<k && end.next!=null) {
                end = end.next;
                i++;
            }
            if(i==k) {
                ListNode prev = null;
                ListNode cur = start;
                ListNode next = start.next;
                while(cur!=end) {
                    ListNode temp = next.next;
                    cur.next = prev;
                    prev = cur;
                    cur = next;
                    next = temp;
                }
                ListNode temp = start;
                start = end.next;
                end = start;
                cur.next = prev;
                if(prev1!=null)
                    prev1.next = cur;
                prev1 = temp;
                if(temp == head) {
                    head = cur;
                }
            } else {
                if(prev1 !=null)
                    prev1.next = start;
                else prev1 = start;
            }
        }
        if(start==end && prev1!=null) {
            prev1.next = start;
        }
        return head;
    }
}