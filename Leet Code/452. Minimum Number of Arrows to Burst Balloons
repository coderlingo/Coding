/**
* 452. Minimum Number of Arrows to Burst Balloons
* There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates 
* don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.
* An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of 
* arrows that can be shot. An arrow once shot keeps traveling up infinitely.
* Given an array points where points[i] = [xstart, xend], return the minimum number of arrows that must be shot to burst all balloons.
*/

class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points,new Comparator<int[]>() {
           public int compare(int[] a, int[] b) {
               if(a[0] == b[0]) { if(a[1]<b[1]) return -1; else return 1;}
               if(a[0]<b[0]) return -1; else return 1;
           } 
        });
        int count = 1;
        int end = points[0][1];
        for(int i =1;i<points.length;i++) {
            if(points[i][0]<=end) {
                end = Math.min(points[i][1],end);
            } else {
                count++;
                end = points[i][1];
            }
        }
        return count;
    }
}