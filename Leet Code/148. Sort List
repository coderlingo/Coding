/**
* 148. Sort List
* Given the head of a linked list, return the list after sorting it in ascending order.
* Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null)
            return null;
        PriorityQueue<ListNode> pq = new PriorityQueue<>(new Comparator<ListNode>() {
            public int compare(ListNode a, ListNode b) {
                if(a.val<b.val) 
                    return -1;
                else 
                    return 1;
                
            }
        });
        while(head!=null) {
           pq.add(head);
           head = head.next;
        }
        ListNode front = null;
        ListNode prev = null;
        while(!pq.isEmpty()) {
            ListNode m = pq.poll();
            //pq.add(m.next);
            if(front == null) {
                front = m;
                prev = front;
            } else {
                prev.next = m;
                prev = prev.next;
            }
        }
        if(prev !=null )
            prev.next = null;
        return front;
    }
}