/**
* 863. All Nodes Distance K in Binary Tree
* Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.
* You can return the answer in any order.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int find(TreeNode root, Map<TreeNode,Integer> map, TreeNode target) {
        if(root == null) {
            return -1;
        }
        if(root == target) {
            map.put(root,0);
            return 0;
        }
        if(root.left!=null) {
            int left = find(root.left,map,target);
            if(left>=0) {
                map.put(root,left+1);
                return left+1;
            }
        }
        if(root.right!=null) {
            int right = find(root.right, map, target);
            if(right>=0) {
                map.put(root, right+1);
                return right+1;
            }
        }
        return -1;
    }
    public void dfs(TreeNode root, TreeNode target, Map<TreeNode,Integer> map, int path, List<Integer> result,int k) {
        if(root == null)
            return;
        if(map.containsKey(root)) {
            if(map.get(root)==k) {
                result.add(root.val);
                
            }
            dfs(root.left,target,map,map.get(root)+1,result, k);
            dfs(root.right,target,map,map.get(root)+1,result, k);
        } else {
            if(path == k) {
                result.add(root.val);
            } 
            dfs(root.left,target,map,path+1,result, k);
            dfs(root.right,target,map,path+1,result, k);
        }
           
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        if(root == null) {
            return new LinkedList<>();
        }
        Map<TreeNode,Integer> map = new HashMap<>();
        find(root,map,target);
        List<Integer> result = new LinkedList<>();
        dfs(root,target,map,map.get(root),result,k);
        return result;
    }
}