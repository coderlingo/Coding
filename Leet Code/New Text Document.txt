/**
* 310. Minimum Height Trees
* A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.
* Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can 
* choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum 
* height trees (MHTs).
* Return a list of all MHTs' root labels. You can return the answer in any order.
* The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
*/

class Solution {
    List<Integer> diameter = new LinkedList<>();
    public List<Integer> getDiameter(Set<Integer>[] graph, int node, boolean[] visited) {
        if(visited[node])
            return new LinkedList<>();
        Set<Integer> edges = graph[node];
        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(new Comparator<List<Integer>>() {
           public int compare(List<Integer> a, List<Integer> b) {
               return b.size() - a.size();
           }    
        });
        visited[node] = true;
        List<Integer> max  = new LinkedList<>();
        List<Integer> secondMax = new LinkedList<>();
        for(int i : edges) {
            List<Integer> d = getDiameter(graph,i,visited);
            if(d.size()>max.size()) {
                secondMax = max;
                max=d;
            } else if(d.size()>secondMax.size()){
                secondMax = d;
            }
            
        }
        List<Integer> l1 = max;
        List<Integer> l2 = secondMax;
        if(diameter.size() < l1.size()+l2.size()+1) {
            diameter = new LinkedList(l1);
            diameter.add(node);
            diameter.addAll(l2);
        }
        l1.add(node);
        return new LinkedList<>(l1);
    }
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        Set<Integer>[] graph = new Set[n];
        for(int i =0;i<n;i++)
            graph[i] = new HashSet<>();
        for(int i = 0;i<edges.length;i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            graph[a].add(b);
            graph[b].add(a);
        }
        List<Integer> inDiameter = new LinkedList<>();
        boolean[] visited = new boolean[n];
        Arrays.fill(visited,false);
        getDiameter(graph,0,visited);
        List<Integer> res = new LinkedList<>();
        if(diameter.size()%2 ==0) {
            res.add(diameter.get((diameter.size()-1)/2));
            res.add(diameter.get((diameter.size()+1)/2));
        } else{
            res.add(diameter.get(diameter.size()/2));
        }
        return res;  
    }
}