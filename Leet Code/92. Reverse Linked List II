/**
* 92. Reverse Linked List II
* Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head == null || head.next == null || left==right)
            return head;
        ListNode prev = null;
        ListNode cur = head;
        int i =1;
        while(i<left) {
            i++;
            prev = cur;
            cur = cur.next;
        }
        ListNode last = prev; // null
        ListNode tail = cur; // 5
        ListNode next = cur.next; // 6
        while(i<=right) {
            cur.next = prev;
            prev = cur;
            cur = next;
            if(next!=null)
                next = next.next;
            i++;
        }
        tail.next = cur;
        if(last!=null)
            last.next = prev;
        else 
            head = prev;
        return head;
        
    }
}