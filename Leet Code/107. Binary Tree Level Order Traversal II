/**
* 107. Binary Tree Level Order Traversal II
* Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new LinkedList<>();
        if(root == null)
            return result;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        List<Integer> res = new LinkedList<>();
        while(!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if(node == null) {
                result.add(0,res);
                res = new LinkedList<>();
                if(!queue.isEmpty()) {
                    queue.add(null);
                }   
                continue;
            }
            res.add(node.val);
            if(node.left!=null) {
                queue.add(node.left);
            }
            if(node.right != null) {
                queue.add(node.right);
            }
            
            
        }
        return result;
    }
}