/**
* 131. Palindrome Partitioning
* Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
* A palindrome string is a string that reads the same backward as forward.
*/
class Solution {
    HashMap<Integer, List<String>> map = new HashMap<>();
    public boolean isPalindrome(char[] s, int start, int end) {
        while(start<end) {
            if(s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    public void dfs(char[] str, List<String> cur, int start,int end, List<List<String>> result) {
        if(start > end) {
            result.add(new LinkedList<String>(cur));
            return;
        }
        for(int i = start;i<=end;i++) {
            if(isPalindrome(str,start,i)) {
                cur.add(String.valueOf(Arrays.copyOfRange(str,start,i+1)));
                dfs(str,cur,i+1,end,result);
                cur.remove(cur.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> result = new LinkedList<>();
        char[] str = s.toCharArray();
        dfs(str,new LinkedList<String>(), 0, s.length()-1,result);
        return result;
    }
}