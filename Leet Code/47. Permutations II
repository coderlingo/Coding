/**
* 47. Permutations II
* Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
*/

class Solution {
    public void getPerms(int[] nums, List<List<Integer>> res, boolean[] visited,List<Integer> cur) {
        if(cur.size() == nums.length) {
            res.add(cur);
            return;
        }
        int prev = -1;
        for(int i=0;i<nums.length;i++) {
            if(!visited[i] && (prev ==-1 || nums[prev]!=nums[i])) {
                visited[i] = true;
                prev = i;
                List<Integer> l = new LinkedList<>(cur);
                l.add(nums[i]);
                getPerms(nums, res, visited, l);
                visited[i] = false;
            }
            
        }
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new LinkedList<>();
        boolean[] visited = new boolean[nums.length];
        getPerms(nums,result, visited,new LinkedList<Integer>());
        return result;
    }
}