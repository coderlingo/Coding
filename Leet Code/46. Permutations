/**
* 46. Permutations
* Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
*/
class Solution {
    public void getPermutation(int[] nums,boolean[] visited, List<Integer> cur, List<List<Integer>> result) {
        if(cur.size() == nums.length) {
            result.add(new LinkedList<>(cur));
            return;
        }
        for(int i=0;i<nums.length;i++) {
            if(!visited[i]) {
                cur.add(nums[i]);
                visited[i] = true;
                getPermutation(nums,visited,cur,result);
                visited[i] = false;
                cur.remove(cur.size()-1);
            }
        }
        
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new LinkedList<>();
        List<Integer> cur = new LinkedList<>();
        boolean[] visited = new boolean[nums.length];
        Arrays.fill(visited,false);
        getPermutation(nums,visited,cur,result);
        return result;
    }
}