/**
* 153. Find Minimum in Rotated Sorted Array
* Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
* [4,5,6,7,0,1,2] if it was rotated 4 times.
* [0,1,2,4,5,6,7] if it was rotated 7 times.
* Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
* Given the sorted rotated array nums of unique elements, return the minimum element of this array.
* You must write an algorithm that runs in O(log n) time.
*/

class Solution {
    public int bSearch(int[] nums,int start,int end) {
        
        if(nums[start]<=nums[end])
            return start;
        int mid = (start+end)/2;
        //System.out.println(mid);
        if(mid>start && mid<end && nums[mid]<nums[mid-1] && nums[mid]<nums[mid+1])
            return mid;
        if(nums[mid] > nums[end]){
           return bSearch(nums,mid+1,end); 
        }
         else 
          return bSearch(nums,start,mid-1);
            
    }
    public int findMin(int[] nums) {
        return nums[bSearch(nums,0,nums.length-1)];
    }
}