/**
* 494. Target Sum
* You are given an integer array nums and an integer target.
* You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
* For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
* Return the number of different expressions that you can build, which evaluates to target.
*/

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = Arrays.stream(nums).reduce(0,(a,b)->a+b);
        if(target > sum || target < -sum)
            return 0;
        int[][] dp = new int[nums.length][2*sum+1];
        int m = 2*sum+1;
        int start = sum;
        for(int i=0;i<nums.length;i++) {
            for(int j =0;j<m;j++) {
                if(i==0) {
                    dp[i][start+nums[i]] = 1;
                    if(start+nums[i] == start-nums[i])
                        dp[i][start-nums[i]] += 1;
                    else dp[i][start-nums[i]] = 1;
                } else {
                    if(dp[i-1][j] > 0) {
                        dp[i][j+nums[i]] +=dp[i-1][j] ;
                        dp[i][j-nums[i]] +=dp[i-1][j] ;
                    }
                }
            }
        }
        return dp[nums.length-1][start+target];
    }
}