/**
* 216. Combination Sum III
* Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
* Only numbers 1 through 9 are used.
* Each number is used at most once.
* Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
*/

class Solution {
    public void dfs(int idx, List<Integer> cur, List<List<Integer>> result,int k, int n) {
        if(cur.size() > k)
            return;
        if(n==0 && cur.size()==k) {
            result.add(new LinkedList<>(cur));
            return;
        }
        for(int i = idx;i<=9 && i<=n;i++) {
            cur.add(i);
            dfs(i+1,cur,result,k,n-i);
            cur.remove(cur.size()-1);
        }
        
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        List<Integer> cur = new LinkedList<>();
        dfs(1,cur,result,k,n);
        return result;
    }
}