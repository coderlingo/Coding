
/**
* 673. Number of Longest Increasing Subsequence
* Given an integer array nums, return the number of longest increasing subsequences.
* Notice that the sequence has to be strictly increasing.
*/

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int[][] dp = new int[nums.length][2];
        for(int i=0;i<nums.length;i++){
           Arrays.fill(dp[i],1);
        
        }
        int max = 1;
        int count = 1;
        for(int i=1;i<nums.length;i++){
            for (int j=0;j<i;j++){
                if(nums[i]>nums[j]) {
                   if(dp[j][0]+1==dp[i][0]){
                     dp[i][1] =dp[i][1]+dp[j][1];
                   }
                    if(dp[j][0]+1>dp[i][0]) {
                       dp[i][0] = dp[j][0] +1;
                        dp[i][1] = dp[j][1];
                        if(max<dp[i][0]) {
                            max=dp[i][0];
                            count = 0;
                        }
                   }
                }
            }
            if(dp[i][0] == max) {
                count += dp[i][1];
            }
            
        }
        return count;
    }
}