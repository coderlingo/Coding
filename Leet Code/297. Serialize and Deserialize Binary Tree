/**
* 297. Serialize and Deserialize Binary Tree
* Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be 
* reconstructed later in the same or another computer environment.
* Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be 
* serialized to a string and this string can be deserialized to the original tree structure.
* Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different 
* approaches yourself.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
       List<String> res = new LinkedList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root==null)
            return "";
        queue.add(root);
        while(!queue.isEmpty()) {
            TreeNode n = queue.poll();
            if(n!=null){
                res.add(String.valueOf(n.val));
                queue.add(n.left);
                queue.add(n.right);
            } else{
                res.add("#");
            }
            
        }
        return String.join("|",res);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.isEmpty()) {
            return null;
        }
        System.out.println(data);
        List<String> list = Arrays.asList(data.split("\\|"));
        TreeNode root = new TreeNode(Integer.parseInt(list.get(0)));
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty() && i<list.size()) {
            TreeNode node = queue.poll();    
            if(!list.get(i).equals("#")) {
                TreeNode left = new TreeNode(Integer.parseInt(list.get(i)));
                node.left = left;
                queue.add(left);
            }
            if((i+1)<list.size() && !list.get(i+1).equals("#")) {
                TreeNode right = new TreeNode(Integer.parseInt(list.get(i+1)));
                node.right = right;
                queue.add(right);
            }
            i=i+2;
        } 
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));