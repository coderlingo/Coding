/**
* 124. Binary Tree Maximum Path Sum
* A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does 
* not need to pass through the root.
* The path sum of a path is the sum of the node's values in the path.
* Given the root of a binary tree, return the maximum path sum of any path.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int maxSum = Integer.MIN_VALUE;
    public int dfs(TreeNode node) {
        if(node==null) {
            return 0;
        }
        int left = dfs(node.left);
        int right = dfs(node.right);
        if(node.val+left+right > maxSum)
            maxSum = node.val + left + right;
        maxSum = Math.max(maxSum,Math.max(node.val,Math.max(node.val+left,node.val+right)));     
        return Math.max(node.val,Math.max(node.val+left,node.val+right));    
        
    }
    //Function to return maximum path sum from any node in a tree.
    public int maxPathSum(TreeNode node)
    {
        dfs(node);
        return maxSum;
    }
}