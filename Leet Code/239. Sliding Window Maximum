/**
* 239. Sliding Window Maximum
* You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time 
* the sliding window moves right by one position.
* Return the max sliding window.
*/

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] res = new int[nums.length-k+1];
        Deque<Integer> deque = new LinkedList<>();
        int start = 0;
        int end = 0;
        while(end<k) {
            if(deque.isEmpty() || deque.getLast() >=nums[end]) {
                deque.addLast(nums[end]);
            } else{
                while(!deque.isEmpty() && deque.getLast() < nums[end]) {
                    deque.pollLast();
                }
                    deque.addLast(nums[end]);
            }
            end++;
        }
        while(end<=nums.length) {
            res[start] = deque.getFirst();
            if(nums[start] == res[start]){
                deque.pollFirst();
            }
            start++;
            if(end<nums.length){
                if(deque.isEmpty() || deque.getLast() >=nums[end]) {
                    deque.addLast(nums[end]);
                } else {
                        while(!deque.isEmpty() && deque.getLast() < nums[end]) {
                            deque.pollLast();
                        }
                        deque.addLast(nums[end]);
                }
            }
            end++;
        }
        return res;
    }
}