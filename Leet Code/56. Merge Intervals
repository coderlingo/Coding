/**
* 56. Merge Intervals
* Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
*/

class Solution {
    class Pair implements Comparable{
        int start;
        int end;
        public Pair(int s, int e) {
            start = s;
            end = e;
        }
        public int compareTo( Object b) {
            /*if( end-((Pair) b).end == 0) {
                return start-((Pair) b).start;
            } else*/
            return this.start-((Pair) b).start;
        }
        
    }
    public int[][] merge(int[][] intervals) {
        List<Pair> list = new LinkedList<>();
        for(int i = 0;i<intervals.length;i++) {
            list.add(new Pair(intervals[i][0],intervals[i][1]));
            
        }
        List<Pair> res = new LinkedList<>();
        Collections.sort(list);
        int prevEnd = list.get(0).end;
        int prevStart = list.get(0).start;
        for(int i = 1;i<list.size();i++) {
            if(prevEnd>=list.get(i).start) {
                prevEnd = Math.max(list.get(i).end,prevEnd);
            } else{
                res.add(new Pair(prevStart,prevEnd));
                prevStart = list.get(i).start;
                prevEnd = list.get(i).end;
            }
        }
        res.add(new Pair(prevStart,prevEnd));
        int[][] resArr = new int[res.size()][2];
        for(int i = 0;i<res.size();i++) {
            resArr[i][0] = res.get(i).start;
            resArr[i][1] = res.get(i).end;
        }
        return resArr;
    }
}