/**
* 143. Reorder List
* Medium
* You are given the head of a singly linked-list. The list can be represented as:
* L0 → L1 → … → Ln - 1 → Ln
* Reorder the list to be on the following form:
* L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
* You may not modify the values in the list's nodes. Only nodes themselves may be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head) {
        if(head == null) {
            return null;
        }
        ListNode prev = null;
        ListNode cur = head;
        ListNode next = head.next;
        while(cur!=null) {
            cur.next = prev;
            prev = cur;
            cur = next;
            if(next==null) {
               break;
            } else {
                next = next.next;
            }
        }
       // System.out.println();
        return prev;
    }
    
    public void reorderList(ListNode head) {
        if(head==null || head.next == null || head.next.next==null)
            return;
        ListNode oddHead;
        ListNode ptr1 = head.next;
        ListNode ptr2 = head;
        while(ptr1!=null && ptr1.next!=null) {
            ptr1 = ptr1.next.next;
            ptr2 = ptr2.next;
        }
        oddHead = ptr2.next;
        ptr2.next = null;
        oddHead = reverse(oddHead);
        ptr1 = head;
        ptr2 = oddHead;
        while(ptr1!=null && ptr2!=null) {
            ListNode temp = ptr1.next;
            ptr1.next = ptr2;
            ptr2 = ptr2.next;
            
            if(temp==null) {
                ptr1.next.next = ptr2;
                break;    
            } else {
                ptr1.next.next = temp;
            }
            ptr1=temp;
            
        }
        
    }
}