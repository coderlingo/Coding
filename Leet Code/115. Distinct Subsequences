/**
* 115. Distinct Subsequences
* Given two strings s and t, return the number of distinct subsequences of s which equals t.
* A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a 
* subsequence of "ABCDE" while "AEC" is not).
* It is guaranteed the answer fits on a 32-bit signed integer.
*/

class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp = new int[t.length()][s.length()];
        for(int i=0;i<s.length();i++) {
            if(s.charAt(i) == t.charAt(0)) {
                dp[0][i] = (i==0)?1:dp[0][i-1]+1;
            } else {
                dp[0][i] = (i==0)?0:dp[0][i-1];
            }
            
        }
        for(int i = 1;i<t.length();i++) {
               dp[i][0] = 0;
            
        }
        for(int i = 1;i<t.length();i++) {
            int val = 0;
            for(int j=1;j<s.length();j++) {
                if(s.charAt(j) == t.charAt(i)) {
                    val =val+dp[i-1][j-1];
                    dp[i][j] = val;
                    //dp[i][j] = dp[i][j] + dp[i-1][j-1];
                } else {
                    dp[i][j] = dp[i][j-1];
                }
            }
        } 
        return dp[t.length()-1][s.length()-1];
    }
}