/**
* 209. Minimum Size Subarray Sum
* Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal 
* to target. If there is no such subarray, return 0 instead.
*/

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int end = 1;
        int start =0;
        int sum = nums[0];
        int maxLength = Integer.MAX_VALUE;
        while(end<nums.length) {
            while(sum<target && end<nums.length) {
                sum = sum + nums[end];
                end++;
            }
            while(start<end && sum>=target) {
                if(end-start < maxLength ) {
                    maxLength = end-start;
                }
                sum = sum - nums[start];
                start++;
            }
        }
        return maxLength == Integer.MAX_VALUE? 0 : maxLength;
    }
}