/**
* 437. Path Sum III
* Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
* The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public void populate(int sum,int target, TreeNode root, Map<Integer,Integer> map) {
        if(root==null) 
            return;
        sum = sum+root.val;
        
        if(map.containsKey(sum-target)) {
            count = count+map.get(sum-target);
        }
        if(sum == target) 
            count++;
        map.put(sum,map.getOrDefault(sum,0)+1);
        populate(sum,target,root.left,new HashMap<>(map));
        populate(sum,target,root.right,map);
    }
    public int pathSum(TreeNode root, int targetSum) {
        Map<Integer,Integer> map = new HashMap<>();
        populate(0,targetSum,root,map);
        return count;
    }
}