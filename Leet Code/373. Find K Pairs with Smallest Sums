/**
* 373. Find K Pairs with Smallest Sums
* You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
* Define a pair (u, v) which consists of one element from the first array and one element from the second array.
* Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.
*/

class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> result = new LinkedList<>();
        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(new Comparator<List<Integer>>(){
           public int compare(List<Integer>  a,List<Integer> b) {
               return  nums2[a.get(1)]+nums1[a.get(0)]-nums2[b.get(1)]-nums1[b.get(0)];
           } 
        });
        
        int i = 0;
        for(i =0;i<nums1.length;i++) {
            List<Integer> temp = new LinkedList<>();
            temp.add(i);
            temp.add(0);
            pq.add(temp);       
        }
        i=0;
        while(!pq.isEmpty() && i<k) {
            List<Integer> l = pq.poll();
            List<Integer> t = new LinkedList<>();
            int x = l.get(0);
            int y = l.get(1);
            t.add(nums1[x]);
            t.add(nums2[y]);
            result.add(t);
            i++;
            if(y!=nums2.length-1) {
                l.set(1,y+1);
                pq.add(l);
            }
        }
        return result;
    }
}