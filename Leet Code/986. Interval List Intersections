/**
* 986. Interval List Intersections
* You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted 
* order.
*
* Return the intersection of these two interval lists.
*
* A closed interval [a, b] (with a < b) denotes the set of real numbers x with a <= x <= b.
*
* The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].
*/

class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        int i =0;
        int j = 0;
        int n = firstList.length;
        int m = secondList.length;
        List<int[]> list = new LinkedList<>();
        while(i<n && j<m) {
            if(firstList[i][1]<secondList[j][0]) {
                i++;
            } else if(secondList[j][1]<firstList[i][0]) {
                j++;
            } else {
                int start = Math.max(firstList[i][0],secondList[j][0]);
                int end = Math.min(firstList[i][1],secondList[j][1]);
                list.add(new int[]{start,end});
                if(firstList[i][1]<secondList[j][1]) {
                    i++;
                } else {
                    j++;
                }
            }  
        }
        int[][] arr = new int[list.size()][2];
        for( i =0;i<list.size();i++) {
            arr[i][0] = list.get(i)[0];
            arr[i][1] = list.get(i)[1];
        }
        return arr;
    }
}