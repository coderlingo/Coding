/**
* 698. Partition to K Equal Sum Subsets
* Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.
*/
class Solution {
    public boolean isPossible(int idx,int[] nums,boolean[] visited,int curSum,int k, int target) {
        if(k==1) return true;
        if(curSum==target) return isPossible(0,nums,visited,0,k-1,target);
        for(int i = idx;i<nums.length;i++) {
            if(!visited[i]) {
                visited[i] = true;
                if(isPossible(i+1,nums,visited,curSum+nums[i],k,target)){
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }
    
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = Arrays.stream(nums).reduce(0,(a,b)->a+b);
        if(sum%k!=0)
            return false;
        sum = sum/k;
        boolean[] visited = new boolean[nums.length];
        //ist<Integer> list =  isPresent(nums,sum);
        return isPossible(0,nums,visited,0,k,sum);
    }
}