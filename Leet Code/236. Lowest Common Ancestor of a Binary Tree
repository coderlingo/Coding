/**
* 236. Lowest Common Ancestor of a Binary Tree
* Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
* According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to 
* be a descendant of itself).”
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode LCA(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null)
            return null;
        TreeNode left = LCA(root.left,p,q);
        TreeNode right = LCA(root.right,p,q);
        TreeNode temp=null;
        if(root.val == p.val){
            temp = root;
        }
        if(root.val == q.val) {
            temp = root;
        }
        if(temp!=null)
            return temp;
        if(left!=null && right!=null)
            return root;
        if(left!=null) return left ;
         return right;
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode node = LCA(root, p,q);
        return node; 
    }
}