/**
* 823. Binary Trees With Factors
* Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.
* We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.
* Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.
*/

class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        Arrays.sort(arr);
        long[] dp = new long[arr.length];
        long mod = (long)Math.pow(10,9)+7;
        Arrays.fill(dp,1);
        Map<Integer,Integer> set = new HashMap<>();
        int idx = 0;
        for(int i:arr) {
            set.put(i,idx);
            idx++;
        }
        int result = 0;
        for(int i=0;i<arr.length;i++) {
            for(int j=0;j<=i;j++) {
                if(arr[i]%arr[j] ==0 && set.containsKey(arr[i]/arr[j])) {
                    dp[set.get(arr[i])] = ( dp[set.get(arr[i])]+dp[set.get(arr[j])] * dp[set.get(arr[i]/arr[j])])%mod;
                }
            }
            result=(int)((result+dp[set.get(arr[i])])%mod);
        }
        return result;
    }
}