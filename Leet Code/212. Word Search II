/**
* 212. Word Search II
* Given an m x n board of characters and a list of strings words, return all words on the board.
* Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
*/
class Solution {
    class TrieNode { 
        char c;
        String word;
        Map<Character, TrieNode> map = new HashMap<>();
        TrieNode() {}
        TrieNode(char c1) {
            c = c1;
        }
    }
    class Trie {
        TrieNode start = new TrieNode();
        public void insert(String str) {
            TrieNode cur = start;
            int i = 0;
            while(i<str.length()) {
                if(cur.map.containsKey(str.charAt(i))) {
                    cur = cur.map.get(str.charAt(i));
                } else {
                    TrieNode n = new TrieNode(str.charAt(i));
                    cur.map.put(str.charAt(i),n);
                    cur = n;
                }
                i++;     
            }
            cur.word = str;
        }
        public void dfs(int r,int c, char[][] board, TrieNode node, List<String> result) {
            if(r<0 || r>=board.length || c<0 || c>=board[0].length || board[r][c] == '#' || node==null )
                return;
            if(!node.map.containsKey(board[r][c]))
                return;
            char ch  = board[r][c];
            board[r][c] = '#';
            TrieNode n = node.map.get(ch);
            if(n.word!= null) {
                result.add(n.word);
                n.word = null;
            }
            dfs(r,c+1, board, n,result) ;
            dfs(r+1,c, board, n,result) ;
            dfs(r,c-1, board, n,result) ;
            dfs(r-1,c, board, n,result);
            board[r][c] = ch;
        }
        public List<String> find(String[] words, char[][] board) {
            List<String> result = new LinkedList<>();
            for(int i = 0;i<board.length;i++) {
                for(int j=0;j<board[0].length;j++) {
                    if(start.map.containsKey(board[i][j])) {
                        dfs(i,j,board,start,result);
                    }
                }
            }
            return result;
        }
    }
    public List<String> findWords(char[][] board, String[] words) {
        Trie trie = new Trie();
        for(String s :words)
            trie.insert(s);
        return trie.find(words,board);
    }
}